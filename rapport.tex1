\documentclass{report}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[francais]{babel}
\usepackage{lmodern}
\usepackage{mathrsfs}
\usepackage{mathrsfs}
\usepackage{textcomp}
\usepackage{listings}
\usepackage{siunitx}
\usepackage{tikz}

\usepackage{color}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}; should come as last argument
  basicstyle=\footnotesize,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=true,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  deletekeywords={...},            % if you want to delete keywords from the given language
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
  frame=single,	                   % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  language=C,                      % the language of the code
  morekeywords={*,...},           % if you want to add more keywords to the set
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=5pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=2,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,	                   % sets default tabsize to 2 spaces
  title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}
\oddsidemargin=-0,8cm
\headsep=-1,5cm
\textwidth 18cm
\textheight 25,3cm

\newenvironment{introduction}{%
     \par\noindent\textbf{Remarques}:\noindent
}{
     \par\noindent
}

\author{Grand Maxence G1, Muller Lucie}
\title{Syst\`emes et R\'eseaux : Impl\'ementation d'un pseudo serveur FTP }
\date{06/04/2017}

\begin{document}

\maketitle
\tableofcontents

\chapter*{Introduction}

    \chapter{Serveur FTP concurrent}
      \section{Objectif de la r\'ealisation}
      \section{Code source comment\'e}
      \subsection{client.c}
      \begin{lstlisting}
int main(int argc, char **argv)
{
  int clientfd, fd;
  char *buf, *host, *hidefile;
  struct timeval start, end;
  size_t len=0, n=0;

  if (argc != 2) {
    fprintf(stderr, "usage: %s <host>\n", argv[0]);
    exit(0);
  }
  host = argv[1];//On recupere le hostname du serveur (127.0.0.1 pour les tests)

  clientfd = Open_clientfd(host, port);//On demande la connexion au serveur

  req = malloc(sizeof(struct Request));//On alloue de la memoire pour la Request
  req->clientfd = clientfd;//On recupere le descripteur du socket

  Rio_readinitb(&rio, clientfd);//On initialise Rio

  printf("client connected to server %s\n", host);

  while (1) {
    printf("Tapez votre requete : \n");
    buf = (char*)malloc(sizeof(char)*MAXLINE);
    Fgets(buf, MAXLINE, stdin);
    req->filename = (char*)malloc(sizeof(char)*MAXLINE);
    req->cmd = (char*)malloc(sizeof(char)*MAXLINE);
    req->content = (char*)malloc(sizeof(char)*MAXLINE);
    sscanf(buf, "%s %s %s", req->cmd, req->filename, req->content);//On recupere la requette tapée par le client

    if(!strcmp(req->cmd, "get")){
      gettimeofday(&start, NULL);
      Rio_writen(req->clientfd, buf, strlen(buf));//On envoie la requete au serveur
      fd = open(strcat(req->filename, "1"), O_RDWR | O_CREAT, 0666);//On creer un fichier pour le téléchargement
      free (buf);
      buf = (char*)malloc(sizeof(char)*MAXSEND);
      while((n=Rio_readn(req->clientfd, buf, MAXSEND)) > 0) {//Tant qu'on recoit des données, on les ecrit dans le fichier
        rio_writen(fd, buf, n);
        len+=n;
        free(buf);
        buf = (char*) malloc(sizeof(char)*MAXSEND);
      }
      Close(fd);
      gettimeofday(&end, NULL);
      double temps = ((end.tv_sec+(double)end.tv_usec/1000000)-(start.tv_sec+(double)start.tv_usec/1000000));
      printf("%lu bytes received in %f sec (%f bytes / sec) \n",len, temps, ((double)(len/temps)));//On affiche le statistiques
      if(len == 0){
        printf("Le téléchargement a echoée\n");
        remove(req->filename);
      }
    }else if(!strcmp(req->cmd, "bye")){//On ferme la connexion
      Rio_writen(req->clientfd, req->cmd, strlen(req->cmd));
      printf("fin de la connexion\n");
      exit(0);
    }else{//Si la commande est inconnue on ferme la connexion
      printf("Commande %s inconnue\n", req->cmd);
      printf("fin de la connexion\n");
      exit(0);
    }
  }
}
      \end{lstlisting}
      \subsection{server.c}
      \begin{lstlisting}
      int main(int argc, char **argv)
      {
      	Signal(SIGINT, stop);
      	Signal(SIGCHLD, handler);
          pid_t p;
          int listenfd, connfd;
          socklen_t clientlen;
          struct sockaddr_in clientaddr;
          char client_ip_string[INET_ADDRSTRLEN];
          char client_hostname[MAX_NAME_LEN];

          clientlen = (socklen_t)sizeof(clientaddr);

          listenfd = Open_listenfd(port);
          for(int i=0; i<NB_PROC; i++){
              if((p=Fork())==0){
                  while (1) {
                      if((connfd = Accept(listenfd, (SA *)&clientaddr, &clientlen))>=0){
      									//On accept la connexion entrnte

                          /* determine the name of the client */
                          Getnameinfo((SA *) &clientaddr, clientlen,client_hostname, MAX_NAME_LEN, 0, 0, 0);

                          /* determine the textual representation of the client's IP address */
                          Inet_ntop(AF_INET, &clientaddr.sin_addr, client_ip_string,INET_ADDRSTRLEN);


                          printf("server connected to %s (%s) %d\n", client_hostname,client_ip_string, getpid());
                          req = malloc(sizeof(struct Request));
                          req->connfd = connfd;

                          readRequest(req);//On lit la requete du client
      										Close(connfd);
                      }
                  }
          				freeRequest(req);
                  exit(0);
              }
              child[i] = p;
          }

          for(int i=0; i<NB_PROC; i++)
              waitpid(child[i], NULL, 0);
      		//On attend tous les fils

          exit(0);
      }

      void handler(int sig){
      	//On s'occupe des zombis
          waitpid(-1, NULL, WNOHANG|WUNTRACED);
          return;
      }
      void stop(int sig){
      	//Si on recoit un SIGCTR, on tue tous les fils
          for(int i=0; i<NB_PROC; i++){
              kill(SIGKILL, child[i]);
          }
          exit(0);
      }

      void readRequest(struct Request *req){

          size_t n;
          req->cmd = (char*)malloc(sizeof(char)*MAXLINE);
          req->filename = (char*)malloc(sizeof(char)*MAXLINE);
          req->content = (char*)malloc(sizeof(char)*MAXLINE);
          char* request = (char *)malloc(sizeof(char)*MAXLINE);
          rio_t rio;
          Rio_readinitb(&rio, req->connfd);
          n=Rio_readlineb(&rio, request, MAXLINE);
          fflush(stdout);
          request[n-1] = '\0';

          sscanf(request, "%s %s %s", req->cmd, req->filename, req->content);
      		//On recupere la requte , et remplis notre Request
      		stat(req->filename, &req->sbuf);
          if(!strcmp("get", req->cmd)){
          	get(req);
          }else if (!strcmp("bye", req->cmd) ) {
          	printf("fin de la connexion");
      			Close(req->connfd);
          }
          fflush(stdout);
      }

      void get(struct Request *req){
      	char buf[MAXSEND];
      	size_t n,err;
      	rio_t rio;


      		//On envoie d'un coup
      		int srcfd;
          char *srcp;
      		//Rio_readinitb(&rio, fd);
          srcfd = Open(req->filename, O_RDONLY, 0);
          srcp = Mmap(0, req->sbuf.st_size, PROT_READ, MAP_PRIVATE, srcfd, 0);
          Close(srcfd);
          Rio_writen(req->connfd, srcp, req->sbuf.st_size);
          Munmap(srcp, req->sbuf.st_size);
      }
      \end{lstlisting}
      \section{Tests}
\begin{lstlisting}[frame=single,basicstyle=\footnotesize,language=bash]
maxence@Sybil:~$ cat Makefile
CC=gcc
CFLAGS=-Wall
LIBS=-lpthread

all: server client


server: server.o csapp.o tell_wait.o
$(CC) $(CFLAGS) -o server server.o csapp.o tell_wait.o  $(LIBS)

client: client.o csapp.o
$(CC) $(CFLAGS) -o client  client.o csapp.o $(LIBS)

client.o: client.c csapp.c client.h csapp.h
$(CC) $(CFLAGS) -c client.c csapp.c $(LIBS)

server.o: server.c csapp.c server.h csapp.h
		$(CC) $(CFLAGS) -c server.c csapp.c $(LIBS)

tell_wait.o: tell_wait.c csapp.c tell_wait.h csapp.h
	$(CC) $(CFLAGS) -c tell_wait.c csapp.c $(LIBS)

csapp.o: csapp.c csapp.h
		$(CC) $(CFLAGS) -c csapp.c $(LIBS)

clean:
  	rm server client *.o
maxence@Sybil:~$ ls
backupServer  client.c  client.o  csapp.h  Makefile  server    server.h  tell_wait.c  tell_wait.o  test_pipe.c
client        client.h  csapp.c   csapp.o  master.c  server.c  server.o  tell_wait.h  test
maxence@Sybil:~$ ./client 127.0.0.1
client connected to server 127.0.0.1
Tapez votre requete :
get Makefile
617 bytes received in 0.002723 sec (226590.103143 bytes / sec)
Tapez votre requete :
bye
fin de la connexion
maxence@Sybil:~$ cat Makefile1
CC=gcc
CFLAGS=-Wall
LIBS=-lpthread

all: server client


server: server.o csapp.o tell_wait.o
  $(CC) $(CFLAGS) -o server server.o csapp.o tell_wait.o  $(LIBS)

client: client.o csapp.o
	$(CC) $(CFLAGS) -o client  client.o csapp.o $(LIBS)

client.o: client.c csapp.c client.h csapp.h
	$(CC) $(CFLAGS) -c client.c csapp.c $(LIBS)

server.o: server.c csapp.c server.h csapp.h
	$(CC) $(CFLAGS) -c server.c csapp.c $(LIBS)

tell_wait.o: tell_wait.c csapp.c tell_wait.h csapp.h
	$(CC) $(CFLAGS) -c tell_wait.c csapp.c $(LIBS)

csapp.o: csapp.c csapp.h
	$(CC) $(CFLAGS) -c csapp.c $(LIBS)

clean:
	rm server client *.o
\end{lstlisting}

    \chapter{D\'ecoupage du fichier}
      \section{Objectif de la r\'ealisation}
      \section{Code source comment\'e}
\subsection{server.c}
Seul la fonction get de server.c a \'et\'e modifi\'ee

  \begin{lstlisting}
void get(struct equest *req){
  	char buf[MAXSEND];
  	size_t n,err;
  	rio_t rio;

  	int fd = open(req->filename, O_RDONLY);
  	Rio_readinitb(&rio, fd);
  	/*
  Tant qu'on a ecris, on continue d'ecrire
  	*/
  	while ((n = Rio_readlineb(&rio, buf, MAXSEND)) > 0) {
  			err = rio_writen(req->connfd, buf, n);
  	    if(err == -1){//On stopper si le client s'arrete
  		     	fprintf(stderr, "Arret innatendu du client\n");
  		     	break;
  	    }
  	}

  }
  \end{lstlisting}
      \section{Tests}
\begin{lstlisting}[frame=single,basicstyle=\footnotesize,language=bash]
maxence@Sybil:~$ cat test
backupServer
client
client.c
client.h
client.o
csapp.c
csapp.h
csapp.o
Makefile
Makefile1
master.c
server
server.c
server.h
server.o
tell_wait.c
tell_wait.h
tell_wait.o
test
test_pipe.c
maxence@Sybil:~$ ./client 127.0.0.1
client connected to server 127.0.0.1
Tapez votre requete :
get test
186 bytes received in 0.009943 sec (18706.611932 bytes / sec)
Tapez votre requete :
bye
fin de la connexion
maxence@Sybil:~$ cat test1
backupServer
client
client.c
client.h
client.o
csapp.c
csapp.h
csapp.o
Makefile
Makefile1
master.c
server
server.c
server.h
server.o
tell_wait.c
tell_wait.h
tell_wait.o
test
test_pipe.c
\end{lstlisting}


    \chapter{Gestion simple des pannes coy\'e client}
      \section{Objectif de la r\'ealisation}
      \section{Code source comment\'e}
      Seul le fichier server.c a \'et\'e modifi\'e
            \subsection{client.c}
            \begin{lstlisting}
/*
Pour savoir si on a déjà tenté de télécharger un fichier, on créer un fichier temporaire au début du téléchargeme,t
Lorsque le téléchargement est terminé on le supprime
Si il existe un fichier temporaire associé au fichier que lon veut télécharger
cela signifie qu'on a déjà essayer de le télécharger, on télécharge uniquement les données manquante
*/
if(!strcmp(req->cmd, "get")){
  gettimeofday(&start, NULL);
  Rio_writen(req->clientfd, buf, strlen(buf));//On envoie la requete au serveur
  hidefile = (char*)malloc(sizeof(char)*MAX_NAME_LEN);
  hidefile[0]='T';
  strcat(hidefile, req->filename);//On créer le nom du fichier temporaire
  if(stat(hidefile,&req->sbuf) != 0){//Si le fichier temporaire n'existe pas
    open(hidefile, O_RDWR | O_CREAT, 0666);//On le créer
    fd = open(strcat(req->filename, "1"), O_RDWR | O_CREAT, 0666);//On creer un fichier pour le téléchargement
    free (buf);
    buf = (char*)malloc(sizeof(char)*MAXSEND);
    while((n=Rio_readn(req->clientfd, buf, MAXSEND)) > 0) {//Tant qu'on recoit des données, on les ecrit dans le fichier
      rio_writen(fd, buf, n);
      len+=n;
      free(buf);
      buf = (char*) malloc(sizeof(char)*MAXSEND);
    }
    Close(fd);
    gettimeofday(&end, NULL);
    double temps = ((end.tv_sec+(double)end.tv_usec/1000000)-(start.tv_sec+(double)start.tv_usec/1000000));
    printf("%lu bytes received in %f sec (%f bytes / sec) \n",len, temps, ((double)(len/temps)));//On affiche le statistiques
      if(len == 0){
      printf("Le téléchargement a echoée\n");
      remove(req->filename);
    }
    remove(hidefile);
  }else{//Si le fichier temporaire existe
    fd = open(strcat(req->filename, "1"), O_WRONLY);
    stat(req->filename,&req->sbuf);
    int dejaLu = req->sbuf.st_size;//On recupere la taille des données déjà téléchargé
    free (buf);
    buf = (char*)malloc(sizeof(char)*MAXSEND);
    while((n=Rio_readn(req->clientfd, buf, MAXSEND)) > 0) {
      int tmp = dejaLu;
      dejaLu-=n;
      if(dejaLu <= 0){//On ecrit si ce sont des données non téléchargées
      rio_writen(fd, buf, n);
      free(buf);
      buf = (char*) malloc(sizeof(char)*MAXSEND);
      len+=n;
    }else{//Sinon on déplace le curseur
      if(n<tmp)
          lseek(fd, n, SEEK_CUR);
      else
          lseek(fd, n-tmp, SEEK_CUR);
      }
    }
    gettimeofday(&end, NULL);
    double temps = ((end.tv_sec+(double)end.tv_usec/1000000)-(start.tv_sec+(double)start.tv_usec/1000000));
      printf("%lu bytes received in %f sec (%f bytes / sec) \n",len, temps, ((double)(len/temps)));
      remove(hidefile);
    }
  }else if(!strcmp(req->cmd, "bye")){//On ferme la connexion
    Rio_writen(req->clientfd, req->cmd, strlen(req->cmd));
    printf("fin de la connexion\n");
    exit(0);
  }else{//On stoppe la connection
    printf("Commande %s inconnue\n", req->cmd);
    printf("fin de la connexion\n");
    exit(0);
  }
}
            \end{lstlisting}

      \section{Tests}
      \begin{lstlisting}[frame=single,basicstyle=\footnotesize,language=bash]
maxence@Sybil:~$ rm test1
maxence@Sybil:~$ head -3 test > test1
maxence@Sybil:~$ touch Ttest
maxence@Sybil:~$ ./client 127.0.0.1
client connected to server 127.0.0.1
Tapez votre requete :
get test
186 bytes received in 0.000816 sec (227977.949737 bytes / sec)
Tapez votre requete :
bye
fin de la connexion
maxence@Sybil:~$ cat test1
backupServer
client
client.c
client.h
client.o
csapp.c
csapp.h
csapp.o
Makefile
Makefile1
master.c
server
server.c
server.h
server.o
tell_wait.c
tell_wait.h
tell_wait.o
test
\end{lstlisting}

    \chapter{Serveur FTP avec \'equilibrage des charges}
      \section{Objectif de la r\'ealisation}
      \section{Code source comment\'e}
      \subsection{master.c}
      \begin{lstlisting}
int sCourant = 0;

int slave[NB_PROC];

int next(){//Renvoie le prochain esclave
	int p = slave[sCourant];
	sCourant = ++sCourant % NB_PROC;
	return p;
}
int main(int argc, char **argv)
{
  int listenfd, connfd;
  socklen_t clientlen;
  struct sockaddr_in clientaddr;
  char client_ip_string[INET_ADDRSTRLEN];
  char client_hostname[MAX_NAME_LEN];
	rio_t rio;

  clientlen = (socklen_t)sizeof(clientaddr);

  listenfd = Open_listenfd(port);

  for(int i =0; i<NB_PROC; i++){
    slave[i] = port+i+1;
  }
  while(1){
    if((connfd = Accept(listenfd, (SA *)&clientaddr, &clientlen))>=0){

      /* determine the name of the client */
      Getnameinfo((SA *) &clientaddr, clientlen,client_hostname, MAX_NAME_LEN, 0, 0, 0);

      /* determine the textual representation of the client's IP address */
      Inet_ntop(AF_INET, &clientaddr.sin_addr, client_ip_string,INET_ADDRSTRLEN);


      printf("server connected to %s (%s) %d\n", client_hostname,client_ip_string, getpid());

  		Rio_readinitb(&rio, connfd);
  		int p = next();
  		Rio_writen(connfd, &p, sizeof(p));//Envoie au client le numero de port de l'esclve traitant

      Close(connfd);//Ferme la connexion avec le client
    }
  }
  exit(0);
}
      \end{lstlisting}
      \subsection{server.c}
      \begin{lstlisting}
clientfd = Open_clientfd(host, port);//On demande la connexion au serveur maitre
printf("client connected to server %s\n", host);

Rio_readn(clientfd, &port2, sizeof(int)); //On recupert le port du serveur esclave

printf("Vous aller être redirigé vers l'esclave %d\n", port2);

clientfd = Open_clientfd(host, port2);//On demande la connexion au serveur esclave

req = malloc(sizeof(struct Request));//On alloue de la memoire pour la Request
req->clientfd = clientfd;//On recupere le descripteur du socket
      \end{lstlisting}
      \section{Tests}
\begin{lstlisting}[frame=single,basicstyle=\footnotesize,language=bash]
maxence@Sybil:~$ ls > test
maxence@Sybil:~$ ./client 127.0.0.1
client connected to server 127.0.0.1
Vous aller être redirigé vers l'esclave 2122
Tapez votre requete :
get test
238 bytes received in 0.004584 sec (51921.582857 bytes / sec)
Tapez votre requete :
bye
fin de la connexion
maxence@Sybil:~$ cat test
backupServer
client
client.c
client.h
client.o
csapp.c
csapp.h
csapp.o
debug
Makefile
master
master.c
master.o
projetFTPBackup
rapport.pdf
rapport.tex
rapport.toc
server
server.c
server.h
server.o
tell_wait.c
tell_wait.h
tell_wait.o
test
\end{lstlisting}
    \chapter{Plusieurs demandes de fichiers par connexions}
      \section{Objectif de la r\'ealisation}
      \section{Code source comment\'e}
      \section{Tests}

      \chapter{Commandes ps, pwd et cd}
        \section{Objectif de la r\'ealisation}
        \section{Code source comment\'e}
        \section{Tests}

        \chapter{Commande mkdir, rm, rmm -r et put}
          \section{Objectif de la r\'ealisation}
          \section{Code source comment\'e}
          \section{Tests}

          \chapter{Autentifcation}
            \section{Objectif de 